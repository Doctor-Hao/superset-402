import React, { useEffect, createRef, useState } from 'react';
import { styled } from '@superset-ui/core';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è props
interface HeaderColumn {
  label: string;
  colSpan?: number;
  rowSpan?: number;
  children?: HeaderColumn[];
}

interface DataRow {
  [key: string]: string | number | null;
}

const Styles = styled.div`
  padding: ${({ theme }) => theme.gridUnit * 4}px;
  border-radius: ${({ theme }) => theme.gridUnit * 2}px;
  height: ${({ height }) => height}px;
  width: ${({ width }) => width}px;
  overflow: auto; /* –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ */

  table {
    width: 100%;
    border-collapse: collapse;
    border: 1px solid black;

    th, td {
      border: 1px solid white;
      padding: 8px;
      text-align: center;
      vertical-align: middle;
      word-wrap: break-word;
      white-space: normal;
      vertical-align: top;
    }

    th {
      background-color: #f9bd00;
      font-weight: bold;
    }
  }

  tr:nth-of-type(odd) {
    background-color: rgb(226,226,226)
  }

   textarea {
    width: 100%; /* –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É textarea —Ä–∞–≤–Ω–æ–π —à–∏—Ä–∏–Ω–µ —è—á–µ–π–∫–∏ */
    resize: none; /* –†–∞–∑—Ä–µ—à–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ */
    border: none; /* –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã */
    box-sizing: border-box; /* –£—á–∏—Ç—ã–≤–∞–µ–º padding –≤ —à–∏—Ä–∏–Ω–µ */
    padding: 8px; /* –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –≤–Ω—É—Ç—Ä–∏ textarea */
    font-size: 14px;
    font-family: inherit;
    background-color: rgb(226,226,226);
  }
`;



export default function SupersetPluginChartKpiCards(props) {
  const { data, height, width, queryData, formData } = props;
  const rootElem = createRef<HTMLDivElement>();

  const [tableData, setTableData] = useState<DataRow[]>([]);
  const [isSaving, setIsSaving] = useState(false);
  const url = formData.endpoint

  useEffect(() => {
    console.log('Plugin props', data);

    if (data) {
      setTableData([...data]); // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º—É—Ç–∞—Ü–∏–π
    }
  }, [data]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ textarea
  const handleInputChange = (rowIndex, field, value) => {
    setTableData(prevData =>
      prevData.map((row, index) =>
        index === rowIndex ? { ...row, [field]: value } : row,
      ),
    );
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const handleSave = async () => {
    setIsSaving(true);
    let attempts = 0;
    const maxAttempts = 5;

    const formResult = {
      var_id: tableData[0].VAR_ID,
      proj_id: tableData[0].PROJ_ID,
      plus: tableData[0].VAR_PLUS,
      minus: tableData[0].VAR_MINUS,
      prerequsites: tableData[0].PREREQUISITES,
    };

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", formResult);

    while (attempts < maxAttempts) {
      try {
        const response = await fetch(
          `${process.env.BACKEND_URL}${url}`,
          {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formResult),
          }
        );

        if (response.ok) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
          setIsSaving(false);
          return; // –ï—Å–ª–∏ —É—Å–ø–µ—Ö, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        } else {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ (–ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${maxAttempts})`);
        }
      } catch (error) {
        console.error(`üö® –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${maxAttempts}):`, error);
      }

      attempts += 1;
      if (attempts < maxAttempts) {
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã... (${attempts}/${maxAttempts})`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    alert('‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ...');
    setIsSaving(false);
  };



  // –ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Å–æ—Ç—ã textarea
  const adjustHeight = (textarea) => {
    textarea.style.height = 'auto'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
    textarea.style.height = `${textarea.scrollHeight}px`; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  };

  return (
    <Styles ref={rootElem} height={height} width={width}>
      {tableData.length > 1 ? (
        <div style={{ textAlign: 'center', padding: '20px', fontSize: '16px', fontWeight: 'bold' }}>
          –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ 1 –≤–∞—Ä–∏–∞–Ω—Ç –∏ 1 –ø—Ä–æ–µ–∫—Ç
        </div>
      ) : (
        <>
          <div style={{ marginBottom: '10px', display: 'flex', justifyContent: 'flex-end' }}>
            <button
              onClick={handleSave}
              disabled={isSaving}
              style={{
                padding: '4px 8px',
                backgroundColor: isSaving ? '#aaa' : '#4CAF50',
                color: 'white',
                border: 'none',
                cursor: isSaving ? 'not-allowed' : 'pointer',
                display: 'flex',
                alignItems: 'center',
              }}
            >
              {isSaving ? (
                <>
                  <div className="spinner" style={{
                    width: '14px',
                    height: '14px',
                    border: '2px solid white',
                    borderTop: '2px solid transparent',
                    borderRadius: '50%',
                    marginRight: '8px',
                    animation: 'spin 0.8s linear infinite'
                  }}></div>
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                </>
              ) : (
                '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã'
              )}
            </button>
          </div>

          <div>
            <table>
              <thead>
                <tr>
                  <th>–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞</th>
                </tr>
              </thead>
              <tbody>
                {tableData.map((row, rowIndex) => (
                  <tr key={rowIndex}>
                    <td>
                      <textarea
                        value={row.PREREQUISITES || ''}
                        onChange={e => {
                          handleInputChange(rowIndex, 'PREREQUISITES', e.target.value);
                          adjustHeight(e.target);
                        }}
                        ref={textarea => textarea && adjustHeight(textarea)}
                      />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            <table>
              <thead>
                <tr>
                  <th>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</th>
                  <th>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏</th>
                </tr>
              </thead>
              <tbody>
                {tableData.map((row, rowIndex) => (
                  <tr key={rowIndex}>
                    <td>
                      <textarea
                        value={row.VAR_PLUS || ''}
                        onChange={e => {
                          handleInputChange(rowIndex, 'VAR_PLUS', e.target.value);
                          adjustHeight(e.target);
                        }}
                        ref={textarea => textarea && adjustHeight(textarea)}
                      />
                    </td>
                    <td>
                      <textarea
                        value={row.VAR_MINUS || ''}
                        onChange={e => {
                          handleInputChange(rowIndex, 'VAR_MINUS', e.target.value);
                          adjustHeight(e.target);
                        }}
                        ref={textarea => textarea && adjustHeight(textarea)}
                      />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <style>
            {`
            @keyframes spin {
              0% { transform: rotate(0deg); }
              100% { transform: rotate(360deg); }
            }
          `}
          </style>
        </>
      )}
    </Styles>
  );
}