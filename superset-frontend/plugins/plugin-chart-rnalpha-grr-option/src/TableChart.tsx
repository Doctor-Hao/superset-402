import React, { createRef, useEffect, useState } from 'react';
import { DataRecord } from '@superset-ui/core';
import { TableChartTransformedProps } from './types';
import { Styles } from './styles';
import { ControlButtons } from './components/ControlButtons';
import AutoResizeTextArea from './components/AutoResizeTextArea';

interface grrOption {
  id: number;
  isNew?: boolean,
  opt_name: string;
  oilfield_name: string;
  la_name: string;
  base_B1C1: number;
  base_extra_reserves: number;
  base_accum_prod: number;
  base_VNS_count: number;
  max_B1C1: number;
  max_extra_reserves: number;
  max_accum_prod: number;
  max_VNS_count: number;
  prb_srr: string;
  grr_results: string;
  dependent_mining: string;
  dependent_drilling: string;
  commentary: string;
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const mockData = [
  { PROJ_ID: '12345', project_name: 'Project Alpha' },
  { PROJ_ID: '67890', project_name: 'Project Beta' },
];

const mockApiResponse: grrOption[] = [
  {
    id: 3,
    opt_name: 'string2',
    oilfield_name: 'string2',
    la_name: 'string2',
    base_B1C1: 0,
    base_extra_reserves: 0,
    base_accum_prod: 0,
    base_VNS_count: 0,
    max_B1C1: 0,
    max_extra_reserves: 0,
    max_accum_prod: 0,
    max_VNS_count: 0,
    prb_srr: 'string',
    grr_results: 'string',
    dependent_mining: 'string',
    dependent_drilling: 'string',
    commentary: 'string',
  },
  {
    id: 4,
    opt_name: 'string1',
    oilfield_name: 'string1',
    la_name: 'string1',
    base_B1C1: 1,
    base_extra_reserves: 1,
    base_accum_prod: 1,
    base_VNS_count: 1,
    max_B1C1: 1,
    max_extra_reserves: 1,
    max_accum_prod: 1,
    max_VNS_count: 1,
    prb_srr: 'string1',
    grr_results: 'string1',
    dependent_mining: 'string10',
    dependent_drilling: 'string10',
    commentary: 'string10',
  },
];

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
const NUM_FIELDS = 16;

// –ø–∞—Ä—Å–µ—Ä —á–∏—Å–ª–∞
const toNumber = (v: string) => {
  const n = Number(v.replace(',', '.'));
  return Number.isFinite(n) ? n : 0;
};

function preprocessLines(text: string): string[][] {
  const rawLines = text.trim().split(/\r?\n/).filter(Boolean);
  const merged: string[][] = [];

  rawLines.forEach(raw => {
    const cells = raw.split('\t');

    const isTail =
      (!cells[0] || !cells[0].trim())      // opt_name

    if (isTail && merged.length) {
      // ‚úÇÔ∏è —Ö–≤–æ—Å—Ç: –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å
      const prev = merged[merged.length - 1];
      cells.forEach((val, idx) => {
        if (val && val.trim()) {
          // –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —Ç–µ–∫—Å—Ç ‚Üí —Å–∫–ª–µ–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏,
          // –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–º–µ–Ω—è–µ–º –ø—É—Å—Ç–æ–µ
          if (prev[idx] && prev[idx].trim()) {
            prev[idx] += idx >= 11 ? '\n' + val : '; ' + val;
          } else {
            prev[idx] = val;
          }
        }
      });
    } else {
      // üÜï –Ω–æ–≤–∞—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
      merged.push(cells);
    }
  });

  return merged;
}

export default function TableChart<D extends DataRecord = DataRecord>(
  props: TableChartTransformedProps<D> & {
    sticky?: any;
  },
) {
  const { height, width, data: initialData, formData } = props;
  const [isLoading, setIsLoading] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [isSaveLoading, setIsSaveLoading] = useState(false);
  const [editedData, setEditedData] = useState<grrOption[]>([]);
  const [projId, setProjId] = useState<string | null>(null);

  const [deletedIds, setDeletedIds] = useState<number[]>([]);

  const [showPastePopup, setShowPastePopup] = useState(false);
  const [clipboardInput, setClipboardInput] = useState('');

  const rootElem = createRef<HTMLDivElement>();
  const url = formData.endpoint;

  const handleLoadExternalMock = async (projId: string) => {
    setIsLoading(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏ 1.5 —Å–µ–∫.
    await new Promise((resolve) => setTimeout(resolve, 1500));

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    setEditedData(mockApiResponse);
    console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–º–æ–∫)");

    setIsLoading(false);
  };

  useEffect(() => {
    // mockDATA
    // if (mockData.length > 0) {
    //   const firstProjId = mockData[0].PROJ_ID; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π PROJ_ID
    //   setProjId(firstProjId);
    // }

  }, [initialData]); // –í—ã–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ initialData

  // 1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º `projId`, –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è `initialData`
  useEffect(() => {
    console.log('init', { initialData });
    if (initialData.length > 0) {
      const firstProjId = initialData[0]?.PROJ_ID;
      if (firstProjId && firstProjId !== projId) {
        setProjId(firstProjId);
      }
    }
  }, [initialData]);

  // 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è `projId`
  useEffect(() => {
    if (projId) {
      // mockDATA
      // handleLoadExternalMock(projId)

      handleLoadExternal(projId);
    }
  }, [projId]);


  // ========== GET-–ª–æ–≥–∏–∫–∞ ==========
  const handleLoadExternal = async (projId: string) => {
    setIsLoading(true);

    const urlGet = `${process.env.BACKEND_URL}${url}/${projId}`;
    console.log(`üîó GET –∑–∞–ø—Ä–æ—Å: ${url}`);

    // –ü—Ä–∏–º–µ—Ä retry –≤ 5 –ø–æ–ø—ã—Ç–æ–∫
    const maxAttempts = 5;
    let attempts = 0;

    while (attempts < maxAttempts) {
      try {
        const response = await fetch(urlGet, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' },
        });
        if (response.ok) {
          const dataFromGet = await response.json();
          setEditedData(dataFromGet.data);
          console.log('‚úÖ –í–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã');
          break; // –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ, —Å—Ç–∞—Ç—É—Å:', response.status);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ:', error);
      }
      attempts += 1;
      if (attempts < maxAttempts) {
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã... (${attempts}/${maxAttempts})`);
        await new Promise(res => setTimeout(res, 2000));
      } else {
        console.error('‚ùå GET-–∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫');
      }
    }

    setIsLoading(false);
  };

  const handleSave = async () => {
    if (!projId) return;
    setIsSaveLoading(true);

    // DELETE 
    try {

      if (deletedIds.length) {
        for (const id of deletedIds) {
          await fetch(`${process.env.BACKEND_URL}${url}/${id}`, {
            method: 'DELETE',
          });
        }
      }
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', e);
    } finally {
      setDeletedIds([]);
    }

    // a) –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Üí POST
    const newRows = editedData.filter(r => (r as any).isNew);
    // b) –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ‚Üí PATCH
    const updatedRows = editedData.filter(r => !(r as any).isNew);

    try {
      // --- POST –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö --------------------------------------
      if (newRows.length) {
        const postResp = await fetch(`${process.env.BACKEND_URL}${url}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            proj_id: projId,
            data: newRows.map(({ isNew, ...row }) => row), // —É–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —Ñ–ª–∞–≥
          }),
        });
        if (postResp.ok) {
          setEditedData(prev =>
            prev.map(r => (r as any).isNew ? { ...r, isNew: undefined } : r),
          );
        }
        if (!postResp.ok) throw new Error('POST failed');
      }

      // --- PATCH –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö --------------------------------------
      const patchResp = await fetch(`${process.env.BACKEND_URL}${url}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          proj_id: projId,
          data: updatedRows,
        }),
      });
      if (!patchResp.ok) throw new Error('PATCH failed');

      console.log('‚úÖ –í—Å—ë —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
      // –ø–æ—Å–ª–µ —É–¥–∞—á–Ω–æ–≥–æ POST/PATCH –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ,
      // —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ id –∏–∑ –±—ç–∫–∞
      handleLoadExternal(projId);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', e);
    } finally {
      setIsSaveLoading(false);
    }
  };


  const handleChange = (id: number, field: keyof grrOption, value: any) => {
    setEditedData(prev =>
      prev.map(row => (row.id === id ? { ...row, [field]: value } : row)),
    );
  };

  const handleAdd = () => {
    const newId = Date.now();
    setEditedData(prev => [
      ...prev,
      {
        id: newId,
        isNew: true,
        opt_name: `-`,
        oilfield_name: '-',
        la_name: '-',
        base_B1C1: 0,
        base_extra_reserves: 0,
        base_accum_prod: 0,
        base_VNS_count: 0,
        max_B1C1: 0,
        max_extra_reserves: 0,
        max_accum_prod: 0,
        max_VNS_count: 0,
        prb_srr: '-',
        grr_results: '-',
        dependent_mining: '-',
        dependent_drilling: '-',
        commentary: '-',
      },
    ]);
  };

  const handleDelete = (id: number) => {
    // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º id –¥–ª—è DELETE
    setDeletedIds(prev => [...prev, id]);

    setEditedData(prev => prev.filter(row => row.id !== id));
  };

  const parseTextAndInsert = (text: string) => {
    const mergedLines = preprocessLines(text);

    const parsed: grrOption[] = mergedLines.map((cells, rowIdx) => {
      // –¥–æ–ø–æ–ª–Ω—è–µ–º/–æ–±—Ä–µ–∑–∞–µ–º –¥–æ —Å—Ç—Ä–æ–≥–æ 16 –ø–æ–ª–µ–π
      if (cells.length < NUM_FIELDS) {
        cells.push(...Array(NUM_FIELDS - cells.length).fill(''));
      }

      return {
        id: Date.now() + rowIdx,
        isNew: true,

        opt_name: cells[0] || '',
        oilfield_name: cells[1] || '',
        la_name: cells[2] || '',

        base_B1C1: toNumber(cells[3]),
        base_extra_reserves: toNumber(cells[4]),
        base_accum_prod: toNumber(cells[5]),
        base_VNS_count: toNumber(cells[6]),

        max_B1C1: toNumber(cells[7]),
        max_extra_reserves: toNumber(cells[8]),
        max_accum_prod: toNumber(cells[9]),
        max_VNS_count: toNumber(cells[10]),

        prb_srr: cells[11] || '',
        grr_results: cells[12] || '',
        dependent_mining: cells[13] || '',
        dependent_drilling: cells[14] || '',
        commentary: cells[15] || '',
      };
    });

    setEditedData(prev => [...prev, ...parsed]);
    setClipboardInput('');
    setShowPastePopup(false);
  }


  return (
    <Styles ref={rootElem} height={height} width={width}>
      {isLoading ? (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      ) : (
        <>
          <div style={{ display: 'flex', justifyContent: 'space-between' }}>
            <div style={{ display: 'flex' }}>
              <button
                style={{ marginRight: 10 }}
                onClick={() => setIsEditing(!isEditing)}
                className="icon-button edit"
              >
                ‚úèÔ∏è {isEditing ? '–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
              </button>
              {isEditing && (
                <>
                  <button
                    onClick={() => setShowPastePopup(true)}
                    className="icon-button edit"
                  >
                    üìã –í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ Excel
                  </button>
                </>
              )}
            </div>

            <div>
              {isEditing && (
                <>
                  {showPastePopup && (
                    <>
                      {/* –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞ */}
                      <div
                        style={{
                          position: 'fixed',
                          top: 0,
                          left: 0,
                          right: 0,
                          bottom: 0,
                          backgroundColor: 'rgba(0,0,0,0.5)',
                          zIndex: 9998,
                        }}
                        onClick={() => setShowPastePopup(false)} // –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
                      />
                      <div
                        style={{
                          position: 'fixed',
                          top: '50%',
                          left: '50%',
                          transform: 'translate(-50%, -50%)',
                          zIndex: 9999,
                          backgroundColor: '#fff',
                          padding: '20px',
                          borderRadius: '8px',
                          boxShadow: '0 0 10px rgba(0,0,0,0.25)',
                          width: '600px',
                          maxHeight: '400px',
                        }}
                        onClick={e => e.stopPropagation()} // –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫–ª–∏–∫–∞
                      >
                        <h4>üì• –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel</h4>
                        <p style={{ fontSize: '14px', color: '#333', marginBottom: '6px' }}>
                          –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏–∑ Excel (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤), –Ω–∞–∂–º–∏—Ç–µ <kbd>Ctrl+V</kbd> –≤ –ø–æ–ª–µ –Ω–∏–∂–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å".
                        </p>
                        <textarea
                          value={clipboardInput}
                          onChange={e => setClipboardInput(e.target.value)}
                          placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å—Ç—Ä–æ–∫–∏ –∏–∑ Excel..."
                          rows={6}
                          style={{ width: '100%', marginBottom: '12px' }}
                        />
                        <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>
                          <button onClick={() => setShowPastePopup(false)}>–û—Ç–º–µ–Ω–∞</button>
                          <button onClick={() => parseTextAndInsert(clipboardInput)}>–î–æ–±–∞–≤–∏—Ç—å</button>
                        </div>
                      </div>
                    </>
                  )}

                  <ControlButtons
                    isSaving={isSaveLoading}
                    onSave={handleSave}
                    onAddRow={handleAdd}
                    addRowLabel="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É"
                  />
                </>
              )}
            </div>
          </div>

          <table cellPadding={4} style={{ width: '100%', borderCollapse: 'collapse', marginTop: 10 }}>
            <thead style={{ backgroundColor: '#f0f0f0' }}>
              <tr>
                <th rowSpan={2}>–û–ø—Ü–∏—è –ì–†–†</th>
                <th rowSpan={2}>–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ</th>
                <th rowSpan={2} style={{ minWidth: '60px' }}>–õ–£</th>

                <th colSpan={4} style={{ maxWidth: '200px' }}>–ë–∞–∑–æ–≤—ã–π (–Ω–∞ –ø–æ–ª–Ω—É—é –≤—ã—Ä–∞–±–æ—Ç–∫—É)</th>
                <th colSpan={4}>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π (–Ω–∞ –ø–æ–ª–Ω—É—é –≤—ã—Ä–∞–±–æ—Ç–∫—É)</th>

                <th rowSpan={2}>–ì–æ–¥ –ü–†–ë/–°–†–†</th>
                <th rowSpan={2}>–ì–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ì–†–†</th>
                <th rowSpan={2}>–ì–æ–¥ –Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º–æ–π –¥–æ–±—ã—á–∏</th>
                <th rowSpan={2}>–ö—É—Å—Ç—ã –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –±—É—Ä–µ–Ω–∏—è</th>
                <th rowSpan={2}>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</th>
                {isEditing && <th rowSpan={2} style={{ width: '60px' }}>–£–¥–∞–ª–∏—Ç—å</th>}
              </tr>
              <tr>
                <th style={{ width: '50px' }}>–ü—Ä–∏—Ä–æ—Å—Ç –∑–∞–ø–∞—Å–æ–≤ –Ω–µ—Ñ—Ç–∏ –∫–∞—Ç.B1C1 –æ—Ç –æ–ø—Ü–∏–∏ –ì–†–† –º–ª–Ω.—Ç–æ–Ω–Ω</th>
                <th style={{ width: '50px' }}>–ò–∑–≤–ª. –∑–∞–ø–∞—Å—ã –ø–æ –æ–ø—Ü–∏–∏ –ì–†–† (–¥—Ä–µ–Ω–∏—Ä—É–µ–º—ã–µ –∑–∞–ø–∞—Å—ã –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –≠–ë), –º–ª–Ω.—Ç–æ–Ω–Ω</th>
                <th style={{ width: '50px' }}>–ù–∞–∫. –¥–æ–±—ã—á–∞ –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –≠–ë –º–ª–Ω.—Ç–æ–Ω–Ω</th>
                <th style={{ width: '50px' }}>–ö–æ–ª-–≤–æ –í–ù–°</th>

                <th style={{ width: '50px' }}>–ü—Ä–∏—Ä–æ—Å—Ç –∑–∞–ø–∞—Å–æ–≤ –Ω–µ—Ñ—Ç–∏ –∫–∞—Ç.B1C1 –æ—Ç –æ–ø—Ü–∏–∏ –ì–†–†, –º–ª–Ω.—Ç–æ–Ω–Ω</th>
                <th style={{ width: '50px' }}>–ò–∑–≤–ª. –∑–∞–ø–∞—Å—ã –ø–æ –æ–ø—Ü–∏–∏ –ì–†–† (–¥—Ä–µ–Ω–∏—Ä—É–µ–º—ã–µ –∑–∞–ø–∞—Å—ã –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –≠–ë), –º–ª–Ω.—Ç</th>
                <th style={{ width: '50px' }}>–ù–∞–∫. –¥–æ–±—ã—á–∞ –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –≠–ë, –º–ª–Ω.—Ç–æ–Ω–Ω</th>
                <th style={{ width: '50px' }}>–ö–æ–ª-–≤–æ –í–ù–°</th>
              </tr>
            </thead>
            <tbody>
              {editedData.map(row => (
                <tr key={row.id}>
                  <td>
                    <AutoResizeTextArea
                      value={row.opt_name ?? ''}
                      onChange={e => handleChange(row.id, 'opt_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.oilfield_name ?? ''}
                      onChange={e => handleChange(row.id, 'oilfield_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.la_name ?? ''}
                      onChange={e => handleChange(row.id, 'la_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.base_B1C1 ?? 0}
                      onChange={e => handleChange(row.id, 'base_B1C1', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.base_extra_reserves ?? 0}
                      onChange={e => handleChange(row.id, 'base_extra_reserves', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.base_accum_prod ?? 0}
                      onChange={e => handleChange(row.id, 'base_accum_prod', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.base_VNS_count ?? 0}
                      onChange={e => handleChange(row.id, 'base_VNS_count', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.max_B1C1 ?? 0}
                      onChange={e => handleChange(row.id, 'max_B1C1', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.max_extra_reserves ?? 0}
                      onChange={e => handleChange(row.id, 'max_extra_reserves', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.max_accum_prod ?? 0}
                      onChange={e => handleChange(row.id, 'max_accum_prod', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.max_VNS_count ?? 0}
                      onChange={e => handleChange(row.id, 'max_VNS_count', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.prb_srr ?? ''}
                      onChange={e => handleChange(row.id, 'prb_srr', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.grr_results ?? ''}
                      onChange={e => handleChange(row.id, 'grr_results', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.dependent_mining ?? ''}
                      onChange={e => handleChange(row.id, 'dependent_mining', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.dependent_drilling ?? ''}
                      onChange={e => handleChange(row.id, 'dependent_drilling', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.commentary ?? ''}
                      onChange={e => handleChange(row.id, 'commentary', e.target.value)}
                    />
                  </td>
                  {isEditing && (
                    <td>
                      <button className="icon-button delete" onClick={() => handleDelete(row.id)}>‚ùå</button>
                    </td>
                  )}
                </tr>
              ))}
            </tbody>
          </table>
        </>
      )}
    </Styles>
  );
}
