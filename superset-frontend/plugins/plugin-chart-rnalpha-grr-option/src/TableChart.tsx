import React, { createRef, useEffect, useState } from 'react';
import { DataRecord } from '@superset-ui/core';
import { TableChartTransformedProps } from './types';
import { Styles, StyledTextArea } from './styles';
import { ControlButtons } from './components/ControlButtons';
import AutoResizeTextArea from './components/AutoResizeTextArea';

interface grrOption {
  id: number;
  opt_name: string;
  oilfield_name: string;
  la_name: string;
  base_B1C1: number;
  base_extra_reserves: number;
  base_accum_prod: number;
  base_VNS_count: number;
  max_B1C1: number;
  max_extra_reserves: number;
  max_accum_prod: number;
  max_VNS_count: number;
  prb_srr: string;
  grr_results: string;
  dependent_mining: string;
  dependent_drilling: string;
  commentary: string;
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const mockData = [
  { PROJ_ID: '12345', project_name: 'Project Alpha' },
  { PROJ_ID: '67890', project_name: 'Project Beta' },
];

const mockApiResponse: grrOption[] = [
  {
    id: 3,
    opt_name: 'string2',
    oilfield_name: 'string2',
    la_name: 'string2',
    base_B1C1: 0,
    base_extra_reserves: 0,
    base_accum_prod: 0,
    base_VNS_count: 0,
    max_B1C1: 0,
    max_extra_reserves: 0,
    max_accum_prod: 0,
    max_VNS_count: 0,
    prb_srr: 'string',
    grr_results: 'string',
    dependent_mining: 'string',
    dependent_drilling: 'string',
    commentary: 'string',
  },
  {
    id: 4,
    opt_name: 'string1',
    oilfield_name: 'string1',
    la_name: 'string1',
    base_B1C1: 1,
    base_extra_reserves: 1,
    base_accum_prod: 1,
    base_VNS_count: 1,
    max_B1C1: 1,
    max_extra_reserves: 1,
    max_accum_prod: 1,
    max_VNS_count: 1,
    prb_srr: 'string1',
    grr_results: 'string1',
    dependent_mining: 'string10',
    dependent_drilling: 'string10',
    commentary: 'string10',
  },
];


export default function TableChart<D extends DataRecord = DataRecord>(
  props: TableChartTransformedProps<D> & {
    sticky?: any;
  },
) {
  const { height, width, data: initialData, formData } = props;
  const [isLoading, setIsLoading] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [isSaveLoading, setIsSaveLoading] = useState(false);
  const [editedData, setEditedData] = useState<grrOption[]>([]);
  const [projId, setProjId] = useState<string | null>(null);
  const rootElem = createRef<HTMLDivElement>();
  const url = formData.endpoint;

  const handleLoadExternalMock = async (projId: string) => {
    setIsLoading(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏ 1.5 —Å–µ–∫.
    await new Promise((resolve) => setTimeout(resolve, 1500));

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    setEditedData(mockApiResponse);
    console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–º–æ–∫)");

    setIsLoading(false);
  };

  useEffect(() => {
    // mockDATA
    if (mockData.length > 0) {
      const firstProjId = mockData[0].PROJ_ID; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π PROJ_ID
      setProjId(firstProjId);
    }

  }, [initialData]); // –í—ã–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ initialData

  // 1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º `projId`, –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è `initialData`
  useEffect(() => {
    if (initialData.length > 0) {
      const firstProjId = initialData[0]?.PROJ_ID;
      if (typeof firstProjId === 'string' && firstProjId !== projId) {
        setProjId(firstProjId);
      }
    }
  }, [initialData]);

  // 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è `projId`
  useEffect(() => {
    if (projId) {
      // mockDATA
      handleLoadExternalMock(projId)

      // handleLoadExternal(projId);
    }
  }, [projId]);


  // ========== GET-–ª–æ–≥–∏–∫–∞ ==========
  const handleLoadExternal = async (projId: string) => {
    setIsLoading(true);

    const urlGet = `${process.env.BACKEND_URL}${url}/${projId}`;
    console.log(`üîó GET –∑–∞–ø—Ä–æ—Å: ${url}`);

    // –ü—Ä–∏–º–µ—Ä retry –≤ 5 –ø–æ–ø—ã—Ç–æ–∫
    const maxAttempts = 5;
    let attempts = 0;

    while (attempts < maxAttempts) {
      try {
        const response = await fetch(urlGet, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' },
        });
        if (response.ok) {
          const dataFromGet = await response.json();
          setEditedData(dataFromGet.data);
          console.log('‚úÖ –í–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã');
          break; // –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ, —Å—Ç–∞—Ç—É—Å:', response.status);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ:', error);
      }
      attempts = +1;
      if (attempts < maxAttempts) {
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã... (${attempts}/${maxAttempts})`);
        await new Promise(res => setTimeout(res, 2000));
      } else {
        console.error('‚ùå GET-–∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫');
      }
    }

    setIsLoading(false);
  };

  const handleSave = async () => {
    if (!projId) return;
    setIsSaveLoading(true);

    const body = {
      proj_id: projId,
      data: editedData,
    };
    console.log("handleSave", body)

    try {
      const response = await fetch(`${process.env.BACKEND_URL}${url}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body),
      });

      if (response.ok) {
        console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
      }
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏', e);
    }

    setIsSaveLoading(false);
  };

  const handleChange = (id: number, field: keyof grrOption, value: any) => {
    setEditedData(prev =>
      prev.map(row => (row.id === id ? { ...row, [field]: value } : row)),
    );
  };

  const handleAdd = () => {
    const newId = Date.now();
    setEditedData(prev => [
      ...prev,
      {
        id: newId,
        opt_name: `–ù–æ–≤—ã–π ${newId}`,
        oilfield_name: '',
        la_name: '',
        base_B1C1: 0,
        base_extra_reserves: 0,
        base_accum_prod: 0,
        base_VNS_count: 0,
        max_B1C1: 0,
        max_extra_reserves: 0,
        max_accum_prod: 0,
        max_VNS_count: 0,
        prb_srr: '',
        grr_results: '',
        dependent_mining: '',
        dependent_drilling: '',
        commentary: '',
      },
    ]);
  };

  const handleDelete = (id: number) => {
    setEditedData(prev => prev.filter(row => row.id !== id));
  };

  return (
    <Styles ref={rootElem} height={height} width={width}>
      {isLoading ? (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      ) : (
        <>
          <button onClick={() => setIsEditing(!isEditing)} className="icon-button edit">
            ‚úèÔ∏è {isEditing ? '–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
          </button>

          {isEditing && (
            <ControlButtons
              isSaving={isSaveLoading}
              onSave={handleSave}
              onAddRow={handleAdd}
              addRowLabel="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É"
            />
          )}

          <table cellPadding={4} style={{ width: '100%', borderCollapse: 'collapse', marginTop: 10 }}>
            <thead style={{ backgroundColor: '#f0f0f0' }}>
              <tr>
                <th rowSpan={2}>–û–ø—Ü–∏—è –ì–†–†</th>
                <th rowSpan={2}>–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ</th>
                <th rowSpan={2}>–õ–£</th>

                <th colSpan={4} style={{ maxWidth: '200px' }}>–ë–∞–∑–æ–≤—ã–π (–Ω–∞ –ø–æ–ª–Ω—É—é –≤—ã—Ä–∞–±–æ—Ç–∫—É)</th>
                <th colSpan={4}>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π (–Ω–∞ –ø–æ–ª–Ω—É—é –≤—ã—Ä–∞–±–æ—Ç–∫—É)</th>

                <th rowSpan={2}>–ì–æ–¥ –ü–†–ë/–°–†–†</th>
                <th rowSpan={2}>–ì–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ì–†–†</th>
                <th rowSpan={2}>–ì–æ–¥ –Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º–æ–π –¥–æ–±—ã—á–∏</th>
                <th rowSpan={2}>–ö—É—Å—Ç—ã –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –±—É—Ä–µ–Ω–∏—è –≤ –ò–ü–†–†2024</th>
                <th rowSpan={2}>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</th>
                {isEditing && <th rowSpan={2} style={{ width: '60px' }}>–£–¥–∞–ª–∏—Ç—å</th>}
              </tr>
              <tr>
                <th>–ü—Ä–∏—Ä–æ—Å—Ç –∑–∞–ø–∞—Å–æ–≤ –Ω–µ—Ñ—Ç–∏ –∫–∞—Ç.B1C1 –æ—Ç –æ–ø—Ü–∏–∏ –ì–†–† –º–ª–Ω.—Ç–æ–Ω–Ω</th>
                <th>–ò–∑–≤–ª. /br –∑–∞–ø–∞—Å—ã –ø–æ –æ–ø—Ü–∏–∏ –ì–†–† (–¥—Ä–µ–Ω–∏—Ä—É–µ–º—ã–µ –∑–∞–ø–∞—Å—ã –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –≠–ë), –º–ª–Ω.—Ç–æ–Ω–Ω</th>
                <th>–ù–∞–∫. –¥–æ–±—ã—á–∞ –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –≠–ë –º–ª–Ω.—Ç–æ–Ω–Ω</th>
                <th>–ö–æ–ª-–≤–æ –í–ù–°</th>

                <th>–ü—Ä–∏—Ä–æ—Å—Ç –∑–∞–ø–∞—Å–æ–≤ –Ω–µ—Ñ—Ç–∏ –∫–∞—Ç.B1C1 –æ—Ç –æ–ø—Ü–∏–∏ –ì–†–†, –º–ª–Ω.—Ç–æ–Ω–Ω</th>
                <th>–ò–∑–≤–ª. –∑–∞–ø–∞—Å—ã –ø–æ –æ–ø—Ü–∏–∏ –ì–†–† (–¥—Ä–µ–Ω–∏—Ä—É–µ–º—ã–µ –∑–∞–ø–∞—Å—ã –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –≠–ë), –º–ª–Ω.—Ç</th>
                <th>–ù–∞–∫. –¥–æ–±—ã—á–∞ –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –≠–ë, –º–ª–Ω.—Ç–æ–Ω–Ω</th>
                <th>–ö–æ–ª-–≤–æ –í–ù–°</th>
              </tr>
            </thead>
            <tbody>
              {editedData.map(row => (
                <tr key={row.id}>
                  <td>{row.id}</td>
                  <td>
                    <AutoResizeTextArea
                      value={row.opt_name}
                      onChange={e => handleChange(row.id, 'opt_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.opt_name}
                      onChange={e => handleChange(row.id, 'opt_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.opt_name}
                      onChange={e => handleChange(row.id, 'opt_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.opt_name}
                      onChange={e => handleChange(row.id, 'opt_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.opt_name}
                      onChange={e => handleChange(row.id, 'opt_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.opt_name}
                      onChange={e => handleChange(row.id, 'opt_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.opt_name}
                      onChange={e => handleChange(row.id, 'opt_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.opt_name}
                      onChange={e => handleChange(row.id, 'opt_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.opt_name}
                      onChange={e => handleChange(row.id, 'opt_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.opt_name}
                      onChange={e => handleChange(row.id, 'opt_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.opt_name}
                      onChange={e => handleChange(row.id, 'opt_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.opt_name}
                      onChange={e => handleChange(row.id, 'opt_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.oilfield_name}
                      onChange={e => handleChange(row.id, 'oilfield_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.la_name}
                      onChange={e => handleChange(row.id, 'la_name', e.target.value)}
                    />
                  </td>
                  <td>
                    <AutoResizeTextArea
                      value={row.commentary}
                      onChange={e => handleChange(row.id, 'commentary', e.target.value)}
                    />
                  </td>
                  {isEditing && (
                    <td>
                      <button className="icon-button delete" onClick={() => handleDelete(row.id)}>‚ùå</button>
                    </td>
                  )}
                </tr>
              ))}
            </tbody>
          </table>
        </>
      )}
    </Styles>
  );
}
