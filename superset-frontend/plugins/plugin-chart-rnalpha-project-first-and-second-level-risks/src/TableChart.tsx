import React, { createRef, useEffect, useState } from 'react';
import { DataRecord } from '@superset-ui/core';
import { TableChartTransformedProps } from './types';
import { DataTableProps } from './DataTable';
import { Styles, StyledTextArea, StyledDateInput } from './styles';
import { ControlButtons } from './components/ControlButtons';

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const mockData = [
  { PROJ_ID: '12345', project_name: 'Project Alpha' },
  { PROJ_ID: '67890', project_name: 'Project Beta' },
];

const mockApiResponse = {
  data: [
    {
      row_num: 1,
      risks_by_direction: `–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞\n–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞\n–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞\n–ü—è—Ç–∞—è —Å—Ç—Ä–æ–∫–∞`,
      third_level_risk_count: 1
    },
    { text: '–°–æ–±—ã—Ç–∏–µ 2', milestone_date: '2025-03-15' },
  ],
};

export default function TableChart<D extends DataRecord = DataRecord>(
  props: TableChartTransformedProps<D> & {
    sticky?: DataTableProps<D>['sticky'];
  },
) {
  const { height, width, data: initialData, formData } = props;
  const [data, setData] = useState<D[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isSaveLoading, setIsSaveLoading] = useState(false);
  const [editedData, setEditedData] = useState<D[]>([]);
  const [projId, setProjId] = useState<string | null>(null);
  const rootElem = createRef<HTMLDivElement>();
  const url = formData.endpoint

  useEffect(() => {
    // mockDATA
    //   const firstProjId = mockData[0].PROJ_ID; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π PROJ_ID
    //   setProjId(firstProjId);
    //   setData(mockApiResponse.data);
    //   setEditedData(mockApiResponse.data);

  }, [initialData]); // –í—ã–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ initialData

  // 1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º `projId`, –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è `initialData`
  useEffect(() => {
    if (initialData.length > 0) {
      const firstProjId = initialData[0]?.PROJ_ID;
      if (firstProjId && firstProjId !== projId) {
        setProjId(firstProjId); // –û–±–Ω–æ–≤–ª—è–µ–º `projId`
      }
    }
  }, [initialData]);

  // 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è `projId`
  useEffect(() => {
    if (projId) {
      handleLoadExternal(projId);
    }
  }, [projId]);


  // ========== GET-–ª–æ–≥–∏–∫–∞ ==========
  const handleLoadExternal = async (projId: string) => {
    setIsLoading(true);

    const url = `http://bnipi-rnc-tst1.rosneft.ru:8098/project/milestones/${projId}`;
    console.log(`üîó GET –∑–∞–ø—Ä–æ—Å: ${url}`);

    // –ü—Ä–∏–º–µ—Ä retry –≤ 5 –ø–æ–ø—ã—Ç–æ–∫
    const maxAttempts = 5;
    let attempts = 0;

    while (attempts < maxAttempts) {
      try {
        const response = await fetch(url, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' },
        });
        if (response.ok) {
          const dataFromGet = await response.json();
          setData(dataFromGet.data);
          setEditedData(dataFromGet.data);
          console.log('‚úÖ –í–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã');
          break; // –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ, —Å—Ç–∞—Ç—É—Å:', response.status);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ:', error);
      }
      attempts++;
      if (attempts < maxAttempts) {
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã... (${attempts}/${maxAttempts})`);
        await new Promise(res => setTimeout(res, 2000));
      } else {
        console.error('‚ùå GET-–∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫');
      }
    }

    setIsLoading(false);
  };

  // ========== PATCH-–ª–æ–≥–∏–∫–∞ ==========
  const handleSave = async () => {
    if (!projId) {
      console.error('‚ùå –û—à–∏–±–∫–∞: PROJ_ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    setIsSaveLoading(true)

    const requestBody = {
      proj_id: projId,
      data: editedData,
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', requestBody);

    const url = `http://bnipi-rnc-tst1.rosneft.ru:8098/project/milestones`;

    try {
      const response = await fetch(url, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          proj_id: projId,
          data: editedData,
        }),
      });

      if (response.ok) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ PATCH-–∑–∞–ø—Ä–æ—Å–µ, —Å—Ç–∞—Ç—É—Å:', response.status);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ PATCH-–∑–∞–ø—Ä–æ—Å–µ:', error);
    } finally {
      setIsSaveLoading(false)
    }
  };

  // ========== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ ==========
  const handleAddRow = () => {
    const newRow = { text: '', milestone_date: '' }; // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    setEditedData([...editedData, newRow]); // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
  };

  // ========== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ==========
  const handleChange = (rowIndex: number, field: string, value: string) => {
    setEditedData(prevData =>
      prevData.map((row, index) =>
        index === rowIndex ? { ...row, [field]: value } : row,
      ),
    );
  };

  // –ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Å–æ—Ç—ã textarea
  const autoResize = (textarea) => {
    textarea.style.height = 'auto'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
    textarea.style.height = `${textarea.scrollHeight}px`; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  };

  return (
    <Styles ref={rootElem} height={height} width={width}>
      {isLoading ? (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      ) : (
        <>
          <ControlButtons
            isSaving={isSaveLoading}
            onSave={handleSave}
            onAddRow={handleAddRow}
          />
          <table>
            <thead>
              <tr>
                <th>‚Ññ –ø/–ø</th>
                <th>–ö–ª—é—á–µ–≤—ã–µ –≤–µ—Ö–∏ –ø—Ä–æ–µ–∫—Ç–∞</th>
                <th>–î–∞—Ç–∞</th>
              </tr>
            </thead>
            <tbody>
              {editedData.map((row, rowIndex) => (
                <tr key={rowIndex}>
                  <td>
                    {rowIndex + 1}
                  </td>
                  <td>
                    <StyledTextArea
                      value={row.text || ''}
                      onChange={(e) => {
                        handleChange(rowIndex, 'text', e.target.value)
                        autoResize(e.target as HTMLTextAreaElement)
                      }}
                      ref={textarea => textarea && autoResize(textarea)}
                    />
                  </td>
                  <td>
                    <StyledDateInput
                      type="date"
                      value={row.milestone_date || ''}
                      onChange={(e) => handleChange(rowIndex, 'milestone_date', e.target.value)}
                    />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </>)}
    </Styles>
  );
}
