
import React, { useEffect, createRef, useState, useRef, useLayoutEffect } from 'react';
import {
  DataRecord,
} from '@superset-ui/core';
import { TableChartTransformedProps } from './types';
import { styled } from '@superset-ui/core';


// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è props
interface HeaderColumn {
  label: string;
  colSpan?: number;
  rowSpan?: number;
  children?: HeaderColumn[];
}

interface DataRow {
  [key: string]: string | number | null;
}

const Styles = styled.div<{ height: number; width: number }>`
  padding: ${({ theme }) => theme.gridUnit * 4}px;
  border-radius: ${({ theme }) => theme.gridUnit * 2}px;
  height: ${({ height }) => height}px;
  width: ${({ width }) => width}px;
  overflow: auto; /* –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ */

  table {
    width: 100%;
    border-collapse: collapse;
    border: 1px solid black;

    th, td {
      border: 1px solid white;
      padding: 8px;
      text-align: center;
      vertical-align: middle;
      word-wrap: break-word;
      white-space: normal;
    }

    th {
      background-color: #f9bd00;
      font-weight: bold;
    }
  }

  tr:nth-of-type(odd) {
    background-color: rgb(226,226,226);
  }
`;

// Styled-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è textarea
const StyledTextArea = styled.textarea`
  width: 100%;
  min-height: 40px;
  resize: none; /* –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ—Å–∞–π–∑ –æ—Ç–∫–ª—é—á—ë–Ω */
  border: none;
  padding: 4px;
  font-size: 14px;
  box-sizing: border-box;
  display: block;
  overflow: hidden;
  background: transparent;
  outline: none;

  &:hover {
    resize: vertical; /* –ü—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Å–∞–π–∑–∞ */
  }
`;

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã textarea
const autoResize = (element: HTMLTextAreaElement) => {
  if (element) {
    element.style.height = 'auto'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
    element.style.height = `${element.scrollHeight}px`; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –≤—ã—Å–æ—Ç—É
  }
};

export default function TableChart<D extends DataRecord = DataRecord>(
  props: TableChartTransformedProps<D>,
) {
  const {
    data, height, width, endpoint, formData
  } = props;
  const rootElem = createRef<HTMLDivElement>();
  const textAreaRefs = useRef<(HTMLTextAreaElement | null)[][]>([]);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useLayoutEffect –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã
  useLayoutEffect(() => {
    setTimeout(() => {
      textAreaRefs.current.forEach(row => {
        row.forEach(textarea => {
          if (textarea) {
            autoResize(textarea);
          }
        });
      });
    }, 0);
  }, [data]); // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö

  const [tableData, setTableData] = useState<DataRow[]>([]);
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    console.log('Plugin props', data);
    console.log('endpoint', endpoint);

    if (data) {
      setTableData([...data]); // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º—É—Ç–∞—Ü–∏–π
    }
  }, [data]);

  // –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∏–∑ formData
  const hiddenIndexes = formData.hidden_columns_indexes
    ? formData.hidden_columns_indexes.split(',').map(idx => parseInt(idx.trim(), 10)).filter(idx => !isNaN(idx))
    : [];

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
  const allColumns = tableData.length ? Object.keys(tableData[0]) : [];
  const visibleColumns = allColumns.filter((_, index) => !hiddenIndexes.includes(index));

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const handleSave = async () => {
    setIsSaving(true);
    let attempts = 0;
    const maxAttempts = 5;
    while (attempts < maxAttempts) {

      try {
        // –ü–∞—Ä—Å–∏–º JSON –∏–∑ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        let mapping = [];
        try {
          mapping = JSON.parse(formData.columns_mapping || '[]');
        } catch (err) {
          alert('–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫');
          return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö, –≥–¥–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏:
        // –∫–ª—é—á–æ–º –±—É–¥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ mapping.api_key, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        const mappedData = tableData.map(row => {
          const mappedRow: { [key: string]: any } = {};
          mapping.forEach(item => {
            // item ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã,
            // –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º (–≤ —Ç.—á. —Å –ø–æ–ª–µ–º api_key)
            const originalColumn = Object.keys(item)[0];
            const { api_key } = item[originalColumn];
            if (api_key && row[originalColumn] !== undefined) {
              mappedRow[api_key] = row[originalColumn];
            }
          });
          return mappedRow;
        });

        const payload = formData.send_as_array ? mappedData : mappedData[0];

        console.log("payload", payload)

        // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        const response = await fetch(endpoint, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(payload),
        });

        if (response.ok) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
          setIsSaving(false);
          return; // –ï—Å–ª–∏ —É—Å–ø–µ—Ö, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
      }

      attempts += 1;
      if (attempts < maxAttempts) {
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã... (${attempts}/${maxAttempts})`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }

    }
    alert('‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ...');
    setIsSaving(false);
  };


  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —è—á–µ–π–∫–µ
  const handleInputChange = (rowIndex: number, columnKey: string, value: string) => {
    setTableData(prevData =>
      prevData.map((row, index) =>
        index === rowIndex ? { ...row, [columnKey]: value } : row,
      ),
    );
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const handleAddRow = () => {
    if (!tableData.length) return; // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    const newRow = Object.keys(tableData[0]).reduce((acc, key) => {
      acc[key] = ''; // –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
      return acc;
    }, {} as DataRow);

    setTableData(prevData => [...prevData, newRow]);
  };

  // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const renderHeaders = () => {
    let mappingDict: Record<string, { name: string; api_key: string }> = {};

    // –ù–∞—Ö–æ–¥–∏–º —Ä—É—Å—Å–∫–æ–µ –∏–º—è –ø–æ–ª—è columns_mapping
    try {
      const mappingArray = JSON.parse(formData.columns_mapping || '[]');
      mappingDict = mappingArray.reduce((acc: any, item: any) => {
        const originalColumn = Object.keys(item)[0];
        if (originalColumn) {
          acc[originalColumn] = item[originalColumn];
        }
        return acc;
      }, {});
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ columns_mapping:', error);
    }

    return (
      <tr>
        {visibleColumns.map((column, index) => {
          // –ï—Å–ª–∏ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –±–µ—Ä—ë–º —Å–≤–æ–π—Å—Ç–≤–æ name, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
          const headerLabel = mappingDict[column]?.name || column;
          return <th key={`header-${index}`}>{headerLabel}</th>;
        })}
      </tr>
    );
  };


  // **–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º**
  const renderDataRows = () => {
    return tableData.map((row, rowIndex) => (
      <tr key={`row-${rowIndex}`}>
        {visibleColumns.map((key, cellIndex) => (
          <td key={`cell-${rowIndex}-${cellIndex}`} style={{ padding: '4px', boxSizing: 'border-box' }}>
            <StyledTextArea
              ref={el => {
                if (!textAreaRefs.current[rowIndex]) {
                  textAreaRefs.current[rowIndex] = [];
                }
                textAreaRefs.current[rowIndex][cellIndex] = el;
              }}
              value={row[key] || ''}
              onChange={e => handleInputChange(rowIndex, key, e.target.value)}
              onInput={e => autoResize(e.target as HTMLTextAreaElement)}
            />
          </td>
        ))}
      </tr>
    ));
  };


  return (
    <Styles ref={rootElem} height={height} width={width}>
      <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '8px' }}>
        {/* <button
          onClick={handleAddRow}
          style={{
            marginRight: '8px',
            padding: '4px 8px',
            backgroundColor: '#4CAF50',
            color: 'white',
            border: 'none',
            cursor: 'pointer',
          }}
        >
          –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É
        </button> */}
        <button
          onClick={handleSave}
          disabled={isSaving}
          style={{
            padding: '4px 8px',
            backgroundColor: isSaving ? '#aaa' : '#4CAF50',
            color: 'white',
            border: 'none',
            cursor: isSaving ? 'not-allowed' : 'pointer',
          }}
        >
          {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
        </button>
      </div>
      <table>
        <thead>
          {renderHeaders()}
        </thead>
        <tbody>
          {renderDataRows()}
        </tbody>
      </table>
    </Styles>
  );
}
