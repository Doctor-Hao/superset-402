// hooks/useExternalData.ts
import { useState } from 'react';

/**
 * –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã columns_mapping (mapping):
 * [
 *   {
 *     "nameColumn": {
 *       "name": "–°—Ç–∞—Ç—É—Å",
 *       "api_key": "status_api",
 *       "get_response": true
 *     }
 *   },
 *   {
 *     "nameColumn2": {
 *       "name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
 *       "api_key": "title_api"
 *     }
 *   },
 *   {
 *     "someOtherColumn": {
 *       "name": "–î—Ä—É–≥–∞—è –∫–æ–ª–æ–Ω–∫–∞",
 *       "api_key": "other_api",
 *       "get_response": true
 *     }
 *   }
 * ]
 * 
 * –ï—Å–ª–∏ —É "nameColumn" –∏ "someOtherColumn" get_response = true,
 * —Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —ç—Ç–∏–º –∫–æ–ª–æ–Ω–∫–∞–º (–≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫–∞—Ö tableData) –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∫ /val1/val2/val3
 */

export function useExternalData(endpoint: string, mapping: any[], tableData: any[]) {
    const [externalData, setExternalData] = useState<any>(null);
    const [isLoading, setIsLoading] = useState(false);

    // ========== GET-–ª–æ–≥–∏–∫–∞ ==========
    const handleLoadExternal = async () => {
        setIsLoading(true);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –µ—Å—Ç—å –≤ tableData
        if (!tableData.length) {
            alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–∞');
            setIsLoading(false);
            return;
        }

        // –ú–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–π–¥—É—Ç –≤ —É—Ä–ª
        const values: string[] = [];

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ mapping
        mapping.forEach((mapItem: any) => {
            const originalColumn = Object.keys(mapItem)[0]; // –Ω–∞–ø—Ä–∏–º–µ—Ä "nameColumn"
            const colConfig = mapItem[originalColumn];

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ get_response: true
            if (colConfig.get_response) {
                // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                const cellValue = tableData[0][originalColumn];
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ/undefined
                if (cellValue !== undefined && cellValue !== null && cellValue !== '') {
                    values.push(String(cellValue));
                }
            }
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º url: /endpoint/val1/val2/...
        const urlWithPath = values.length
            ? `${endpoint}/${values.join('/')}`
            : endpoint;

        console.log('GET urlWithPath:', urlWithPath);

        // –ü—Ä–∏–º–µ—Ä retry –≤ 5 –ø–æ–ø—ã—Ç–æ–∫
        const maxAttempts = 5;
        let attempts = 0;

        while (attempts < maxAttempts) {
            try {
                const response = await fetch(urlWithPath, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                });
                if (response.ok) {
                    const dataFromGet = await response.json();
                    setExternalData(dataFromGet);
                    console.log('‚úÖ –í–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã');
                    break; // –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                } else {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ, —Å—Ç–∞—Ç—É—Å:', response.status);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ:', error);
            }
            attempts++;
            if (attempts < maxAttempts) {
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã... (${attempts}/${maxAttempts})`);
                await new Promise(res => setTimeout(res, 2000));
            } else {
                console.error('‚ùå GET-–∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫');
            }
        }

        setIsLoading(false);
    };


    // ========== PATCH-–ª–æ–≥–∏–∫–∞==========
    const handleSaveExternal = async () => {
        if (!externalData) {
            alert('–ù–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }

        // –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é
        const payload = { ...externalData };

        mapping.forEach((mapItem: any) => {
            const originalColumn = Object.keys(mapItem)[0];
            const colConfig = mapItem[originalColumn];

            if (colConfig.api_key && tableData.length > 0) {
                const cellValue = tableData[0][originalColumn];
                if (cellValue !== undefined) {
                    payload[colConfig.api_key] = cellValue;
                }
            }
        });

        console.log('PATCH payload:', payload);

        const maxAttempts = 5;
        let attempts = 0;

        while (attempts < maxAttempts) {
            try {
                const response = await fetch(endpoint, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload),
                });
                if (response.ok) {
                    console.log('‚úÖ –í–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
                    break;
                } else {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞—Ç—É—Å:', response.status);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ PATCH-–∑–∞–ø—Ä–æ—Å–µ:', error);
            }
            attempts++;
            if (attempts < maxAttempts) {
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ PATCH-–∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã... (${attempts}/${maxAttempts})`);
                await new Promise(res => setTimeout(res, 2000));
            } else {
                console.error('‚ùå PATCH-–∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫');
            }
        }
    };

    return {
        externalData,
        setExternalData,
        isLoading,
        handleLoadExternal,
        handleSaveExternal,
    };
}
